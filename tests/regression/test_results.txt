=========================================
  Gemini Delegation Regression Tests
=========================================

Test Session Date: 2025-10-17
Test Session Time: 16:10:09

Checking dependencies...
- gemini CLI: OK
- jq (JSON processor): OK
- git: OK

Found 18 test(s) to execute

Running: test_0.1_git_delegation

=========================================
Test 0.1: Git Delegation Decision
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Show me the git status and recent commits"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... FAIL (No delegation detected)
Assert 3: Delegation command pattern found... WARN (Expected delegation pattern not found)
Assert 4: Output contains git information... PASS
Assert 5: Execution time reasonable (<120s)... PASS (29s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred - skipping token analysis

=========================================
Test Result: FAIL
=========================================

Running: test_0.10_mixed_task

=========================================
Test 0.10: Mixed Task (Partial Delegation)
Category: Claude Delegation Logic - Edge Case
=========================================
Executing: claude -p "Show me the git status, then write a bash function that can parse git status output to count modified files"

Assert 1: Exit code is 0... PASS
Assert 2: Delegation occurred (for git)... PASS
Assert 3: Output contains git status... PASS
Assert 4: Output contains parsing function... PASS
Assert 5: Execution time reasonable (<120s)... PASS (39s)

=========================================
Token Consumption Analysis
=========================================
Claude Tokens: Not available in output
Gemini Stats: JSON output not found

=========================================
Test Result: PASS
=========================================

Running: test_0.2_codebase_analysis

=========================================
Test 0.2: Codebase Analysis Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Analyze all shell scripts in tests/regression/ and summarize their purpose"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... PASS
Assert 3: Delegation uses file reading tools... WARN (Expected file reading tools not found)
Assert 4: Output contains test analysis... PASS
Assert 5: Execution time reasonable (<180s)... PASS (49s)

=========================================
Token Consumption Analysis
=========================================
Claude Tokens: Not available in output
Gemini Stats: JSON output not found

=========================================
Test Result: PASS
=========================================

Running: test_0.3_security_audit

=========================================
Test 0.3: Security Audit Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Perform a security audit on the shell scripts in tests/regression/ and identify any potential vulnerabilities"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... FAIL (No delegation detected)
Assert 3: Uses Pro model for security audit... WARN (Expected Pro model for security audit)
Assert 4: Output contains security analysis... PASS
Assert 5: Execution time reasonable (<300s)... PASS (93s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred - skipping token analysis

=========================================
Test Result: FAIL
=========================================

Running: test_0.4_build_operations

=========================================
Test 0.4: Build Operations Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Run 'ls -la tests/regression' and show me the output"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... FAIL (No delegation detected)
Assert 3: Uses shell access flag... WARN (Expected -y flag for shell commands)
Assert 4: Output contains command results... PASS
Assert 5: Execution time reasonable (<120s)... PASS (22s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred - skipping token analysis

=========================================
Test Result: FAIL
=========================================

Running: test_0.5_web_search

=========================================
Test 0.5: Web Search Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Search the web for 'KISS principle in software engineering' and summarize the key points"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... WARN (No delegation detected - web search may not be working)
Assert 3: Uses web search tools... WARN (Expected GoogleSearch or WebFetch tools)
Assert 4: Output contains KISS principle info... PASS
Assert 5: Execution time reasonable (<180s)... PASS (36s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred
Note: Web search may not be available in current Gemini build

=========================================
Test Result: PASS
=========================================

Running: test_0.6_multi_file_search

=========================================
Test 0.6: Multi-File Search Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Find all files that contain 'TEST_ID' and list their paths"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... FAIL (No delegation detected)
Assert 3: Uses file search tools... WARN (Expected FindFiles or SearchText tools)
Assert 4: Output contains file paths... PASS
Assert 5: Execution time reasonable (<120s)... PASS (27s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred - skipping token analysis

=========================================
Test Result: FAIL
=========================================

Running: test_0.7_simple_code_edit

=========================================
Test 0.7: Simple Code Edit (No Delegation Expected)
Category: Claude Delegation Logic - Negative Test
=========================================
Executing: claude -p "Add a comment '# Simple edit test' at the top of tests/regression/test_0.1_git_delegation.sh"

Assert 1: Exit code is 0... PASS
Assert 2: Claude did NOT delegate... PASS
Assert 3: Claude handled the task... PASS
Assert 4: Execution time quick (<60s)... PASS (14s)

=========================================
Token Consumption Analysis
=========================================
No delegation (as expected)
Claude Tokens: Not available in output

=========================================
Test Result: PASS
=========================================

Running: test_0.8_code_generation

=========================================
Test 0.8: Code Generation (No Delegation Expected)
Category: Claude Delegation Logic - Negative Test
=========================================
Executing: claude -p "Write a bash function called 'calculate_sum' that takes two numbers as arguments and returns their sum"

Assert 1: Exit code is 0... PASS
Assert 2: Claude did NOT delegate... FAIL (Unexpected delegation - Claude should handle this)
Assert 3: Output contains generated code... PASS
Assert 4: Execution time quick (<60s)... PASS (9s)

=========================================
Token Consumption Analysis
=========================================
WARNING: Delegation occurred when it shouldn't have
Code generation is Claude's core strength

=========================================
Test Result: FAIL
=========================================

Running: test_0.9_simple_question

=========================================
Test 0.9: Simple Question (No Delegation Expected)
Category: Claude Delegation Logic - Negative Test
=========================================
Executing: claude -p "What does DRY principle stand for in software engineering?"

Assert 1: Exit code is 0... PASS
Assert 2: Claude did NOT delegate... PASS
Assert 3: Output contains DRY explanation... PASS
Assert 4: Execution time quick (<30s)... PASS (9s)

=========================================
Token Consumption Analysis
=========================================
No delegation (as expected)
Claude Tokens: Not available in output

=========================================
Test Result: PASS
=========================================

Running: test_1.1_git_operations

=========================================
Test 1.1: Git Operations
Category: Basic Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Show me the git status and recent commits" -m gemini-flash-latest -y -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output contains git information... PASS
Assert 4: Token efficiency threshold met... PASS (90% efficient)
Assert 5: Execution time reasonable (<120s)... PASS (16s)

=========================================
Test Result: PASS
=========================================

Running: test_1.2_multifile_reading

=========================================
Test 1.2: Multi-File Reading
Category: Basic Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Read all markdown files in the project and summarize their purpose" -m gemini-flash-latest --allowed-tools=[FindFiles,ReadFile,ReadFolder,ReadManyFiles,SearchText] -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output mentions multiple markdown files... PASS (Found 5 references)
Assert 4: Output contains summaries... PASS
Assert 5: Token efficiency threshold met... PASS (392% efficient)
Assert 6: Execution time reasonable (<120s)... PASS (19s)

=========================================
Test Result: PASS
=========================================

Running: test_1.3_code_search

=========================================
Test 1.3: Code Search Delegation
Category: Basic Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Find all occurrences of the word 'delegation' in all shell scripts in the tests/regression directory." -m gemini-flash-latest -y -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output contains search results (delegation and .sh)... PASS
Assert 4: Token efficiency threshold met... PASS (90% efficient)
Assert 5: Execution time reasonable (<120s)... PASS (21s)

=========================================
Test Result: PASS
=========================================

Running: test_1.4_error_handling

=========================================
Test 1.4: Error Handling and Recovery
Category: Basic Delegation
=========================================

Sub-test 1: Non-existent file search
-------------------------------------
Assert 1.1: Graceful handling (exit code 0)... PASS
Assert 1.2: Valid JSON response... PASS
Assert 1.3: Indicates file not found... FAIL

Sub-test 2: Pattern with no matches
-------------------------------------
Assert 2.1: Graceful handling (exit code 0)... PASS
Assert 2.2: Valid JSON response... PASS
Assert 2.3: Indicates no matches found... FAIL

Sub-test 3: Invalid shell command
-------------------------------------
Assert 3.1: CLI handles gracefully... PASS
Assert 3.2: Valid JSON response... PASS
Assert 3.3: Reports command error... PASS

=========================================
Test Result: FAIL
=========================================

Running: test_1.5_large_search

=========================================
Test 1.5: Large-scale Search Operations
Category: Basic Delegation
=========================================

Sub-test 1: Project-wide search with breakdown
-------------------------------------
Assert 1.1: Exit code is 0... PASS
Assert 1.2: Output is valid JSON... PASS
Assert 1.3: Provides quantitative results... PASS
Assert 1.4: Breakdown by file extension... PASS
Assert 1.5: Execution time reasonable (<120s)... PASS (28s)

Sub-test 2: Multi-file testing strategy analysis
-------------------------------------
Assert 2.1: Exit code is 0... PASS
Assert 2.2: Output is valid JSON... PASS
Assert 2.3: Discusses test organization... PASS
Assert 2.4: Discusses validation patterns... PASS
Assert 2.5: Discusses coverage approach... PASS
Assert 2.6: Execution time reasonable (<120s)... PASS (21s)

=========================================
Test Result: PASS
=========================================

Running: test_2.1_codebase_analysis

=========================================
Test 2.1: Codebase Architecture Analysis
Category: Complex Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Analyze the entire codebase to identify token-heavy operations that are safe for Gemini delegation. Focus on: 1) Multi-file operations, 2) Shell/git operations, 3) Web research operations, 4) Build/test operations. Provide a concise summary of delegation opportunities." -m gemini-2.5-pro -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output mentions delegation opportunities... PASS
Assert 4: Output covers multiple operation categories... PASS (Found 4 categories)
Assert 5: Token efficiency threshold met... PASS (149% efficient)
Assert 6: Execution time reasonable (<300s)... PASS (94s)

=========================================
Test Result: PASS
=========================================

Running: test_2.2_complex_multifile_analysis

=========================================
Test 2.2: Complex Multi-file Analysis
Category: Complex Delegation
=========================================

Sub-test 1: Test suite comprehensive analysis
-------------------------------------
Assert 1.1: Exit code is 0... PASS
Assert 1.2: Output is valid JSON... PASS
Assert 1.3: References multiple tests (3+)... PASS (Found 7 test references)
Assert 1.4: References tool usage... PASS
Assert 1.5: Discusses token efficiency... PASS
Assert 1.6: Execution time reasonable (<120s)... PASS (27s)

Sub-test 2: Structured data analysis
-------------------------------------
Assert 2.1: Exit code is 0... PASS
Assert 2.2: Output is valid JSON... PASS
Assert 2.3: Identifies JSON files... PASS
Assert 2.4: Analyzes structure and fields... PASS
Assert 2.5: Execution time reasonable (<120s)... PASS (19s)

=========================================
Test Result: PASS
=========================================

Running: test_3.1_deep_security_audit

=========================================
Test 3.1: Deep Security and Architecture Audit
Category: Advanced Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Perform a comprehensive security and architecture audit of this project. Analyze: 1) Permission model and security guardrails, 2) Token efficiency architecture, 3) Test coverage and validation approach, 4) Potential security risks in the delegation pattern" -m gemini-2.5-pro -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Covers permission model... PASS
Assert 4: Covers architecture... PASS
Assert 5: Covers test coverage... PASS
Assert 6: Identifies security risks... PASS
Assert 7: Discusses token efficiency... PASS
Assert 8: Token efficiency threshold met... PASS (93% efficient)
Assert 9: Execution time reasonable (<300s)... PASS (61s)

=========================================
Test Result: PASS
=========================================


=========================================
  Test Summary
=========================================

  test_0.1_git_delegation: FAIL
  test_0.10_mixed_task: PASS
  test_0.2_codebase_analysis: PASS
  test_0.3_security_audit: FAIL
  test_0.4_build_operations: FAIL
  test_0.5_web_search: PASS
  test_0.6_multi_file_search: FAIL
  test_0.7_simple_code_edit: PASS
  test_0.8_code_generation: FAIL
  test_0.9_simple_question: PASS
  test_1.1_git_operations: PASS
  test_1.2_multifile_reading: PASS
  test_1.3_code_search: PASS
  test_1.4_error_handling: FAIL
  test_1.5_large_search: PASS
  test_2.1_codebase_analysis: PASS
  test_2.2_complex_multifile_analysis: PASS
  test_3.1_deep_security_audit: PASS

Total Tests:  18
Passed:       12
Failed:       6
Success Rate: 66%

Some tests failed. Please review output above.
=========================================

carlos.mello@NB-9580 MINGW64 ~/OneDrive/projects/claude-gemini-delegation (main)
$ ./tests/regression/run_tests.sh

=========================================
  Gemini Delegation Regression Tests
=========================================

Test Session Date: 2025-10-17
Test Session Time: 16:25:48

Checking dependencies...
- gemini CLI: OK
- jq (JSON processor): OK
- git: OK

Found 18 test(s) to execute

Running: test_0.1_git_delegation

=========================================
Test 0.1: Git Delegation Decision
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Show me the git status and recent commits"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... PASS
Assert 3: Delegation command pattern found... WARN (Expected delegation pattern not found)
Assert 4: Output contains git information... PASS
Assert 5: Execution time reasonable (<120s)... PASS (31s)

=========================================
Token Consumption Analysis
=========================================
Claude Tokens: Not available in output
Gemini Stats: JSON output not found

=========================================
Test Result: PASS
=========================================

Running: test_0.10_mixed_task

=========================================
Test 0.10: Mixed Task (Partial Delegation)
Category: Claude Delegation Logic - Edge Case
=========================================
Executing: claude -p "Show me the git status, then write a bash function that can parse git status output to count modified files"

Assert 1: Exit code is 0... PASS
Assert 2: Delegation occurred (for git)... PASS
Assert 3: Output contains git status... PASS
Assert 4: Output contains parsing function... PASS
Assert 5: Execution time reasonable (<120s)... PASS (39s)

=========================================
Token Consumption Analysis
=========================================
Claude Tokens: Not available in output
Gemini Stats: JSON output not found

=========================================
Test Result: PASS
=========================================

Running: test_0.2_codebase_analysis

=========================================
Test 0.2: Codebase Analysis Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Analyze all shell scripts in tests/regression/ and summarize their purpose"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... PASS
Assert 3: Delegation uses file reading tools... PASS
Assert 4: Output contains test analysis... PASS
Assert 5: Execution time reasonable (<180s)... PASS (56s)

=========================================
Token Consumption Analysis
=========================================
Claude Tokens: Not available in output
Gemini Stats: JSON output not found

=========================================
Test Result: PASS
=========================================

Running: test_0.3_security_audit

=========================================
Test 0.3: Security Audit Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Perform a security audit on the shell scripts in tests/regression/ and identify any potential vulnerabilities"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... PASS
Assert 3: Uses Pro model for security audit... WARN (Expected Pro model for security audit)
Assert 4: Output contains security analysis... PASS
Assert 5: Execution time reasonable (<300s)... PASS (96s)

=========================================
Test Result: PASS
=========================================

Running: test_0.4_build_operations

=========================================
Test 0.4: Build Operations Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Run 'ls -la tests/regression' and show me the output"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... PASS
Assert 3: Uses shell access flag... WARN (Expected -y flag for shell commands)
Assert 4: Output contains command results... PASS
Assert 5: Execution time reasonable (<120s)... PASS (34s)

=========================================
Token Consumption Analysis
=========================================
Claude Tokens: Not available in output
Gemini Stats: JSON output not found

=========================================
Test Result: PASS
=========================================

Running: test_0.5_web_search

=========================================
Test 0.5: Web Search Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Search the web for 'KISS principle in software engineering' and summarize the key points"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... WARN (No delegation detected - web search may not be working)
Assert 3: Uses web search tools... WARN (Expected GoogleSearch or WebFetch tools)
Assert 4: Output contains KISS principle info... PASS
Assert 5: Execution time reasonable (<180s)... PASS (30s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred
Note: Web search may not be available in current Gemini build

=========================================
Test Result: PASS
=========================================

Running: test_0.6_multi_file_search

=========================================
Test 0.6: Multi-File Search Delegation
Category: Claude Delegation Logic
=========================================
Executing: claude -p "Find all files that contain 'TEST_ID' and list their paths"

Assert 1: Exit code is 0... PASS
Assert 2: Claude delegated to Gemini... FAIL (No delegation detected)
Assert 3: Uses file search tools... WARN (Expected FindFiles or SearchText tools)
Assert 4: Output contains file paths... PASS
Assert 5: Execution time reasonable (<120s)... PASS (31s)

=========================================
Token Consumption Analysis
=========================================
No delegation occurred - skipping token analysis

=========================================
Test Result: FAIL
=========================================

Running: test_0.7_simple_code_edit

=========================================
Test 0.7: Simple Code Edit (No Delegation Expected)
Category: Claude Delegation Logic - Negative Test
=========================================
Executing: claude -p "Add a comment '# Simple edit test' at the top of tests/regression/test_0.1_git_delegation.sh"

Assert 1: Exit code is 0... PASS
Assert 2: Claude did NOT delegate... PASS
Assert 3: Claude handled the task... PASS
Assert 4: Execution time quick (<60s)... PASS (18s)

=========================================
Token Consumption Analysis
=========================================
No delegation (as expected)
Claude Tokens: Not available in output

=========================================
Test Result: PASS
=========================================

Running: test_0.8_code_generation

=========================================
Test 0.8: Code Generation (No Delegation Expected)
Category: Claude Delegation Logic - Negative Test
=========================================
Executing: claude -p "Write a bash function called 'calculate_sum' that takes two numbers as arguments and returns their sum"

Assert 1: Exit code is 0... PASS
Assert 2: Claude did NOT delegate... PASS
Assert 3: Output contains generated code... PASS
Assert 4: Execution time quick (<60s)... PASS (9s)

=========================================
Token Consumption Analysis
=========================================
No delegation (as expected)
Claude Tokens: Not available in output

=========================================
Test Result: PASS
=========================================

Running: test_0.9_simple_question

=========================================
Test 0.9: Simple Question (No Delegation Expected)
Category: Claude Delegation Logic - Negative Test
=========================================
Executing: claude -p "What does DRY principle stand for in software engineering?"

Assert 1: Exit code is 0... PASS
Assert 2: Claude did NOT delegate... PASS
Assert 3: Output contains DRY explanation... PASS
Assert 4: Execution time quick (<30s)... PASS (12s)

=========================================
Token Consumption Analysis
=========================================
No delegation (as expected)
Claude Tokens: Not available in output

=========================================
Test Result: PASS
=========================================

Running: test_1.1_git_operations

=========================================
Test 1.1: Git Operations
Category: Basic Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Show me the git status and recent commits" -m gemini-flash-latest -y -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output contains git information... PASS
Assert 4: Token efficiency threshold met... PASS (90% efficient)
Assert 5: Execution time reasonable (<120s)... PASS (17s)

=========================================
Test Result: PASS
=========================================

Running: test_1.2_multifile_reading

=========================================
Test 1.2: Multi-File Reading
Category: Basic Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Read all markdown files in the project and summarize their purpose" -m gemini-flash-latest --allowed-tools=[FindFiles,ReadFile,ReadFolder,ReadManyFiles,SearchText] -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output mentions multiple markdown files... PASS (Found 5 references)
Assert 4: Output contains summaries... PASS
Assert 5: Token efficiency threshold met... PASS (307% efficient)
Assert 6: Execution time reasonable (<120s)... PASS (20s)

=========================================
Test Result: PASS
=========================================

Running: test_1.3_code_search

=========================================
Test 1.3: Code Search Delegation
Category: Basic Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Find all occurrences of the word 'delegation' in all shell scripts in the tests/regression directory." -m gemini-flash-latest -y -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output contains search results (delegation and .sh)... PASS
Assert 4: Token efficiency threshold met... PASS (90% efficient)
Assert 5: Execution time reasonable (<120s)... PASS (21s)

=========================================
Test Result: PASS
=========================================

Running: test_1.4_error_handling

=========================================
Test 1.4: Error Handling and Recovery
Category: Basic Delegation
=========================================

Sub-test 1: Non-existent file search
-------------------------------------
Assert 1.1: Graceful handling (exit code 0)... PASS
Assert 1.2: Valid JSON response... PASS
Assert 1.3: Indicates file not found... PASS

Sub-test 2: Pattern with no matches
-------------------------------------
Assert 2.1: Graceful handling (exit code 0)... PASS
Assert 2.2: Valid JSON response... PASS
Assert 2.3: Indicates no matches found... PASS

Sub-test 3: Invalid shell command
-------------------------------------
Assert 3.1: CLI handles gracefully... PASS
Assert 3.2: Valid JSON response... PASS
Assert 3.3: Reports command error... PASS

=========================================
Test Result: PASS
=========================================

Running: test_1.5_large_search

=========================================
Test 1.5: Large-scale Search Operations
Category: Basic Delegation
=========================================

Sub-test 1: Project-wide search with breakdown
-------------------------------------
Assert 1.1: Exit code is 0... PASS
Assert 1.2: Output is valid JSON... PASS
Assert 1.3: Provides quantitative results... PASS
Assert 1.4: Breakdown by file extension... PASS
Assert 1.5: Execution time reasonable (<120s)... PASS (28s)

Sub-test 2: Multi-file testing strategy analysis
-------------------------------------
Assert 2.1: Exit code is 0... PASS
Assert 2.2: Output is valid JSON... PASS
Assert 2.3: Discusses test organization... PASS
Assert 2.4: Discusses validation patterns... PASS
Assert 2.5: Discusses coverage approach... PASS
Assert 2.6: Execution time reasonable (<120s)... PASS (17s)

=========================================
Test Result: PASS
=========================================

Running: test_2.1_codebase_analysis

=========================================
Test 2.1: Codebase Architecture Analysis
Category: Complex Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Analyze the entire codebase to identify token-heavy operations that are safe for Gemini delegation. Focus on: 1) Multi-file operations, 2) Shell/git operations, 3) Web research operations, 4) Build/test operations. Provide a concise summary of delegation opportunities." -m gemini-2.5-pro -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Output mentions delegation opportunities... PASS
Assert 4: Output covers multiple operation categories... PASS (Found 4 categories)
Assert 5: Token efficiency threshold met... PASS (159% efficient)
Assert 6: Execution time reasonable (<300s)... PASS (62s)

=========================================
Test Result: PASS
=========================================

Running: test_2.2_complex_multifile_analysis

=========================================
Test 2.2: Complex Multi-file Analysis
Category: Complex Delegation
=========================================

Sub-test 1: Test suite comprehensive analysis
-------------------------------------
Assert 1.1: Exit code is 0... PASS
Assert 1.2: Output is valid JSON... PASS
Assert 1.3: References multiple tests (3+)... PASS (Found 7 test references)
Assert 1.4: References tool usage... PASS
Assert 1.5: Discusses token efficiency... PASS
Assert 1.6: Execution time reasonable (<120s)... PASS (22s)

Sub-test 2: Structured data analysis
-------------------------------------
Assert 2.1: Exit code is 0... PASS
Assert 2.2: Output is valid JSON... PASS
Assert 2.3: Identifies JSON files... PASS
Assert 2.4: Analyzes structure and fields... PASS
Assert 2.5: Execution time reasonable (<120s)... PASS (16s)

=========================================
Test Result: PASS
=========================================

Running: test_3.1_deep_security_audit

=========================================
Test 3.1: Deep Security and Architecture Audit
Category: Advanced Delegation
=========================================
Executing: export REFERRAL=claude && gemini "Perform a comprehensive security and architecture audit of this project. Analyze: 1) Permission model and security guardrails, 2) Token efficiency architecture, 3) Test coverage and validation approach, 4) Potential security risks in the delegation pattern" -m gemini-2.5-pro -o json 2>/dev/null

Assert 1: Exit code is 0... PASS
Assert 2: Output is valid JSON... PASS
Assert 3: Covers permission model... PASS
Assert 4: Covers architecture... PASS
Assert 5: Covers test coverage... PASS
Assert 6: Identifies security risks... PASS
Assert 7: Discusses token efficiency... PASS
Assert 8: Token efficiency threshold met... PASS (93% efficient)
Assert 9: Execution time reasonable (<300s)... PASS (87s)

=========================================
Test Result: PASS
=========================================


=========================================
  Test Summary
=========================================

  test_0.1_git_delegation: PASS
  test_0.10_mixed_task: PASS
  test_0.2_codebase_analysis: PASS
  test_0.3_security_audit: PASS
  test_0.4_build_operations: PASS
  test_0.5_web_search: PASS
  test_0.6_multi_file_search: FAIL
  test_0.7_simple_code_edit: PASS
  test_0.8_code_generation: PASS
  test_0.9_simple_question: PASS
  test_1.1_git_operations: PASS
  test_1.2_multifile_reading: PASS
  test_1.3_code_search: PASS
  test_1.4_error_handling: PASS
  test_1.5_large_search: PASS
  test_2.1_codebase_analysis: PASS
  test_2.2_complex_multifile_analysis: PASS
  test_3.1_deep_security_audit: PASS

Total Tests:  18
Passed:       17
Failed:       1
Success Rate: 89%

Some tests failed. Please review output above.
=========================================